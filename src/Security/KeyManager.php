<?php
/**
 * Created by PhpStorm.
 * User: laurent
 * Date: 20/11/2018
 * Time: 17:47
 */

namespace Showme\Security;

/**
 * The key contains:
 *   - the current timestamp
 *   - a random uniqueid that identifies this conversation / file upload
 *   - a hash to authentify the key and link it to a user
 * The uniqueid
 *   - will be used to identify the pictures sent by the recipient
 *   - and will be used in the P2P live video, as follows:
 *     - the master will be identified    as [uuid]-0
 *     - and the recipient        as [uuid]-1
 */
class KeyManager implements KeyManagerInterface
{

    /**
     * {@inheritdoc}
     */
    public function create($userid)
    {
        global $params;

        if ($params[$userid] == null){
            throw new \InvalidArgumentException('The user ID doesn\'t exist.');
        };

        $parts = [];

        $parts[] = date("YmdHi");
        $parts[] = bin2hex(random_bytes(22));
        $parts[] = $this->hash($params[$userid]['secret'] . $parts[0] . $parts[1]);

        return join('_', $parts);
    }

    /**
     * {@inheritdoc}
     */
    public function check($key)
    {
        global $params;

        $aValid = ['_'];
        if (!ctype_alnum(str_replace($aValid, '', $key))) return false;
        if ((strlen($key) < 35) | (strlen($key) > 512)) return false;

        $parts = explode('_', $key);

        $dt = date_create_from_format('YmdHi', $parts[0]);
        if (time() - $dt->getTimestamp() > 3600 * 6) return false;                // max 6 hours ago

        $key_verified = false;
        foreach ($params as $userid => $user_params) {
            if ($this->hash($user_params['secret'] . $parts[0] . $parts[1]) == $parts[2]) {
                $key_verified = true;
            }
        }
        if (!$key_verified) {
            return false;                                        // the key should have been generated by the server
        }

        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function getUser($key)
    {
        global $params;

        $parts = explode('_', $key);

        foreach ($params as $userid => $user_params) {
            if ($this->hash($user_params['secret'] . $parts[0] . $parts[1]) == $parts[2]) {
                return $userid;
            }
        }

        throw new \InvalidArgumentException('User not found.');
    }

    /**
     * @param string $txt
     *
     * @return string
     */
    private function hash($txt)
    {
        return hash('sha256', $txt);
    }

    /**
     * {@inheritdoc}
     */
    public function checkUser($userid)
    {
        if (strlen($userid) > 512) return false;
        if (!ctype_alnum($userid)) return false;

        return true;
    }
}